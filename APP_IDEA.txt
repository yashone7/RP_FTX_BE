rp-ftx-fe 2nd idea
=============================

Converting unorganized sector to organized sector in medical 
sales distribution

problem
=====================

current business scenario is as follows, the medecine distributors have 
a couple retailers who place orders to the distributors and then pay them
back in cheque or cash or dd. And the sales boys are in charge of collecting 
the payment.

solution
=====================
Introducing simplified way to receive payments and honor you retailers' requests
using __APP_NAME__ 

-> settle payments quickly (day-1 payments)
-> get insights and analytics related to individual clients 

======================================================================

Distributors - Retailers

User 
-----------------------------
type - distributor / retailer
id - 
name - 
password -
email - 
phone_number - 

orders
-------------
order_id
order_amount
client_id (retailer_id)
order_status (pending/successful/fail)

invoices
---------------
invoice_id
order_id

order_items
--------------
item_id
product_id
product_qty
product_price
order_id

products
------------
product_name
product_id
product_price
product_stock_value

-> createDistributor web service is working fine! 
-> createRetailer web service is working fine!

If TXN is successfull -> then update order details and create an invoice
if TXN fails -> update order details to fail and revoke product details 



cart functionality - frontend -> 


if order successful ->
updateOrder
createInvoice

if order fails ->
revokeProduct
updateOrderStatus

distributor
=========================
getTotalSale - join orders and retailer
getSaleByRetailer - 
getSaleByRetailer - filter via date
updateProduct - dheeraj
deleteProduct - dheeraj



orders API 
=============================

/api/orders - POST - done

order_id - created from backend
order_amount - req.body
distributor_id - req.body
client_id -  req.body
order_status - "pending"

order_items is dependent upon orders
=======================================
item_id - created in the backend
product_id - req.body
product_price - req.body
product_qty - req.body
order_id - part of transaction so backend will fill order_id


SALES API
=========================

retailer-wise sale -> join orders, distributors, retailers where orders status is successful

product-wise sale -> join order_items

font end --->

create products
update products


 SELECT o.order_id, 
    o.order_amount, 
    r.retailer_id, 
    d.distributor_id, 
    r.name AS retailer_name, 
    d.name AS distributor_name, 
    r.location, r.pincode,
    o.createdAt  
    FROM orders o INNER JOIN retailers r ON
    o.client_id = r.retailer_id INNER JOIN distributors d ON
    d.distributor_id = o.distributor_id
    WHERE 
    CAST(o.createdAt AS DATETIME) 
    BETWEEN CAST('2021-12-02 14:15:55' AS DATETIME) 
    AND 
    CAST('2021-12-04 14:15:55' AS DATETIME) 
    AND r.retailer_id = "${retailer_id}";